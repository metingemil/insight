git fetch -p -> delete remote tracking branches

git branch -vv  -> show all local branches that track remote branches

git branch -d [branch] -> delete local branch

git push origin --delete [branch] -> delete remote branch

git push -u(--set-upstream) origin [branch]  -> create branch on remote 

git branch  [branch]

git branch [branch] (--set-upstream-to=[origin/branch])  -> create local branch  (also set upstream track)

git checkout -b [branch] --track [remote/remote_branch] -> create local branch and move to it, optionally set tracking branch

git branch --set-upstream-to=[origin/branch]) -> change tracking branch for the current branch

git pull --rebase - pull changes from remote and reapply local changes

git status -b --porcelain  -> show which remote branch is tracking
cat .git/config

git remote add [remote_name] [repository] -> add a remote repository

git remote set-url origin git@github.com:metingemil/surf.git -> change remote repo url

git merge [dest_branch] [source_branch] --allow-unrelated-histories -> merge source_branch on top of dest_branch

git commit --amend -> change last commit

git reset [named commit] -> set the current branch HEAD to named commit
		- (--mixed (default optional) -> cpy from repo to staing area; --soft - dont't copy anything from repo; --hard - copy from repo to working area and staging area)
		- use case: remove commited file from last commit
						i) git reset --soft HEAD~1  -> move HEAD to the last commit and don't touch anything in working and staging area (will leave the files modified locally as before the commit)
						ii) git reset HEAD <file>	-> remove the file we don't want in the commit (also git rm --cached <file> is identical) - this removes it from the staging area
						iii) git commit 

git reset --hard origin/master -> reset local master branch to origin/master (! this will lose data - be carefull, i'm using this when by mistake I commit to master branch instead of commiting to dev branch)

git rebase -i HEAD~3 -> interactive rebase last 3 commits beafore HEAD

git revert commit -> automatically creates a new commit with opposite changes

git reflog HEAD -> show activity log

git show [named commi] -> show commit details

git show-ref [branch] -> show local and remotes branch current commits

git blame [file] -> show in which commit every line happend

lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd (%cr)) %C(bold blue)<%an>%Creset' --abbrev-commit --date=iso

git log --decorate -> show positional references

git log start-branch..end-branch -> show all commits reachable from end-branch that are not reachable from start-branch (basically what is new in end-branch)
	equivalent to git log ^start-branch end-branch

	git log start-branch...end-branch -> three dots - finds all commits that are reachable from start-branch, OR that are reachable from end-branch BUT that are NOT reachable from both start-branch AND end-branch.

	git lg  HEAD..origin/master  -> show log of new commits on origin master branch and not yet merged on local branch

	e.g.
	             H--I--J  topicB
	            /
        	    | E---F---G  topicA
	            |/
	A---B---C---D  master

	git log topicB..topicA -> G, F, E
	git log topicB...topicA -> G, F, E,J,I,H


	git lg merge-commit^..merge-commit -> what new commits from merge-commit

		commit^ equivalent to commit^1  -> means the first side commit of merge
				      commit^2  -> the 2nd side of merge commit


git cherry-pick [named commit]	->  cheryy pick a single commit from another branch to be included

git cat-file -p [named commit]  -> print commit file contents

git update-index --skip-worktree(--no-skip-worktree) [file]   -> skip(unskip) unstaged changes once added to .git/info/exclude

git remote -v  -> view remote

